--
-- GENie - Project generator tool
-- https://github.com/bkaradzic/GENie#license
--

local qbs = premake.qbs

function qbs.generate_solution(sln)

	_p('/*')
	_p(' * QBS project file autogenerated by GENie')
	_p(' * https://github.com/bkaradzic/GENie')
	_p(' */')
	_p('')
	_p('import qbs')
	_p('')

	_p(0, 'Project {')

	_p(1, 'references: [')
	for prj in premake.solution.eachproject(sln) do
		_p(2, '"' .. prj.name .. '.qbs",')
	end
	_p(1, ']')

	_p(0, '}')
end

function qbs.generate_user(sln)

	_p(0, '<?xml version="1.0" encoding="UTF-8"?>')
	_p(0, '<!DOCTYPE QtCreatorProject>')
	_p(0, '<!-- Written by GENie. -->')
	_p(0, '<qtcreator>')
	_p(1, '<data>')
	_p(2, '<variable>Version</variable>')
	_p(2, '<value type="int">18</value>')
	_p(1, '</data>')

	local startProject = 0

	for ii, prj in ipairs(sln.projects) do
		if sln.startproject == prj.name then
			startProject = ii
		else
		end
	end

	_p(1, '<data>')
	_p(2, '<variable>ProjectExplorer.Project.ActiveTarget</variable>')
	_p(2, '<value type="int">%d</value>', startProject)
	_p(1, '</data>')

	local idx = 0

	_p(1, '<data>')
	_p(2, '<variable>ProjectExplorer.Project.Target.0</variable>')

	_p(2, '<valuemap type="QVariantMap">')

	_p(3, '<value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Desktop</value>')
	_p(3, '<value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Desktop</value>')
	_p(3, '<value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">{a2dfd3b4-6cb0-45f5-af3a-7b006d8b8b27}</value>')

	_p(3, '<value type="int" key="ProjectExplorer.Target.ActiveBuildConfiguration">0</value>')
	_p(3, '<value type="int" key="ProjectExplorer.Target.ActiveDeployConfiguration">0</value>')
	_p(3, '<value type="int" key="ProjectExplorer.Target.ActiveRunConfiguration">%d</value>', startProject)

	for ii, prj in ipairs(sln.projects) do
		idx = ii - 1

--		_p(3, '<variable>ProjectExplorer.Project.Target.%d</variable>', idx)

		_p(3, '<valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.%d">', idx)
		if idx == startProject then
			_p(4, '<value type="int" key="PE.EnvironmentAspect.Base">2</value>')
		else
			_p(4, '<value type="int" key="PE.EnvironmentAspect.Base">-1</value>')
		end
		_p(4, '<valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>')
		_p(4, '<value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">%s</value>', prj.name)
		_p(4, '<value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">%s</value>', prj.name)
		_p(4, '<value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>')

		_p(4, '<value type="QString" key="Qbs.RunConfiguration.CommandLineArguments"></value>')

		local cfg = premake.getconfig(prj, nil, nil)
		if cfg.debugdir ~= nil then
			_p(4, '<value type="QString" key="Qbs.RunConfiguration.WorkingDirectory">%s</value>', cfg.debugdir)
		else
			_p(4, '<value type="QString" key="Qbs.RunConfiguration.WorkingDirectory"></value>')
		end

		_p(3, '</valuemap>')
	end
	_p(2, '<value type="int" key="ProjectExplorer.Target.RunConfigurationCount">%d</value>', idx+1)
	_p(2, '</valuemap>')
	_p(1, '</data>')

	_p(1, '<data>')
	_p(2, '<variable>ProjectExplorer.Project.TargetCount</variable>')
	_p(2, '<value type="int">1</value>')
	_p(1, '</data>')

	_p(0, '</qtcreator>')

end
